package com.jeeddev.rsace.appTree;



import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Random;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.w3c.dom.Attr;
import org.w3c.dom.Comment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.joeddev.rsace.configResources.AppManifestBuild;
import com.joeddev.rsace.configResources.Developer;

public class TreeWriter extends TreeBuilder
{
    DocumentBuilderFactory docBuilderFactory;
    DocumentBuilder docBuilder;
    Document doc;
    TreeBuilder configBuilder;
    IFile configF;
    public static TreeWriter instance = new TreeWriter() ;
    
    private TreeWriter()  
    {
        
         super();
    }
    
    public static TreeWriter getInstance ()
    {
        return instance;
    }
    
    public Element createRoot (Document doc, String rootName, String elementNS, String headerComment )
    {
        Element rootElement =  doc.createElementNS(elementNS, rootName);
        rootElement.appendChild(doc.createComment(headerComment));
        doc.appendChild(rootElement);
        return rootElement;
        
    }
     public Element createElement (Document doc,Element root, String elementName)
    {
        Element element = doc.createElement(elementName);
        root.appendChild(element);
        return element;
        
    }
    
    public void setAtrribute (Document doc , Element element, String attributeName, String attValue)
    {
     // set attribute to staff element
        Attr attr = doc.createAttribute(attributeName);
        attr.setValue(attValue);
        element.setAttributeNode(attr);
    }
    
    public void setChildNode (Document doc, Element parent, String elementName, String value)
    {
     
        Element firstname = doc.createElement(elementName);
        firstname.appendChild(doc.createTextNode(value));
        parent.appendChild(firstname);
    }
    
    
   
    
    private void prepareDeveloperInfo (Developer dev, Element root, Document document)
    {
       
        Element developer =  createElement (document, root, "developer");
        setAtrribute(document, developer, "id", dev.getId());
        setChildNode(document, developer, "name", dev.getName());
        setChildNode(document, developer, "email", dev.getEmail());
        setChildNode(document, developer, "session_active", String.valueOf(dev.isActive()));
        setChildNode(document, developer, "session_owner", String.valueOf(dev.isSender()));
        
    }
    private Document getNewDocument (IFile file) throws ParserConfigurationException
    {
        DocumentBuilderFactory docBuilF = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder =  docBuilF.newDocumentBuilder();
        return docBuilder.newDocument();
        
    }
    
    private Document getDocumentToParse (IFile file) throws SAXException, IOException, CoreException, ParserConfigurationException
    {
        
        DocumentBuilderFactory docBuilF = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder =  docBuilF.newDocumentBuilder();
        return docBuilder.parse(file.getContents());
    }

    public void addDeveloperLeaderForThisSession (Developer developer) throws ParserConfigurationException, CoreException
    {
        IFile file = getFile(TreeBuilder.CONFIG_DIR, ConfigBuilder.TEAM_FILE_CONFIG);
        Document document = getNewDocument(file);
        Element root = createRoot(document, "developers_team", 
                                  "http://jocdev.com/Rsace/ConfigFiles/developers",
                                  "DO NOT EDIT THIS FILE MANUALLY. You can safely edit this file from your rsace's preferences");
        prepareDeveloperInfo(developer, root, document);
        InputStream is = getStream(file, document);
        file.setContents(is, IResource.NONE, null);
        
    }
    
    public void addDeveloperToTeam (Developer developer) throws SAXException, IOException, CoreException, ParserConfigurationException
    {
        IFile file = getFile(TreeBuilder.CONFIG_DIR, ConfigBuilder.TEAM_FILE_CONFIG);
        Document document = getDocumentToParse(file);
        document.getDocumentElement().normalize();
        Element root = document.getDocumentElement();
        prepareDeveloperInfo(developer, root, document);
        InputStream is = getStream(file, document);
        file.setContents(is, IResource.NONE, null);
    }
    
    
    protected InputStream getStream (IFile file, Document doc)
    {
        try
        {
            
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new StringWriter());
            transformer.transform(source, result);
            String xmlString=result.getWriter().toString();
            byte[] bytes = xmlString.getBytes();
            return new ByteArrayInputStream(bytes);
            
        }
        catch (Exception e)
        {
            System.out.println(e.getMessage());
        }
        return null;
    }
     
    public ArrayList <Developer> getDevelopers (IFile file)
    {
        try
        { 
           String id, name, email;
           boolean isActive, isSender;
           DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
           DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
           Document doc = documentBuilder.parse(file.getContents());
           doc.getDocumentElement().normalize();
           NodeList nList = doc.getElementsByTagName("developer");
           ArrayList <Developer> developers = new ArrayList<>();
           for (int i = 0; i<nList.getLength(); i++)
           {
               Node nNode = nList.item(i);
               if (nNode.getNodeType() == Node.ELEMENT_NODE) 
               {
                   Element eElement = (Element) nNode;
                   id = eElement.getAttribute("id");
                   name = eElement.getElementsByTagName("name").item(0).getTextContent();
                   email = eElement.getElementsByTagName("email").item(0).getTextContent();
                   isActive = Boolean.valueOf(eElement.getElementsByTagName("active").item(0).getTextContent());
                   isSender = Boolean.valueOf(eElement.getElementsByTagName("sender").item(0).getTextContent());
                   developers.add(new Developer(id,name,email,isActive,isSender));
                   
               }
               
           }
           return developers;
        }
        catch (Exception e)
        {
            
        }
        return null;
    }
    private void prepareManifestData (AppManifestBuild manifest, Element root, Document document)
    {
        Element appName =  createElement (document, root, "application");
        setAtrribute(document, appName, "app_name", "com.joeddev.com.rsace");
        setAtrribute(document,appName,"version", "1.0");
        setAtrribute(document,appName,"product", "debugging");
        Element launcher =  createElement (document, root, "Launcher");
        setAtrribute(document, launcher, "times_executed", "1");
        Element appEntryPoint =  createElement (document, root, "AppMain");
        setAtrribute(document, appEntryPoint, "entry_point", "InitHandler.class");
        Element remotePermissions =  createElement (document, root, "Remote_Session");
        String permissions = String.valueOf(manifest.getRemotePermissionsState());
        setAtrribute(document, remotePermissions, "permissions", permissions);
        
        
        
    }
    
    
    public void makeManifestFile (AppManifestBuild manifest) throws ParserConfigurationException, CoreException
    {
        IFile file = getFile(TreeBuilder.CONFIG_DIR, ConfigBuilder.MANIFEST_FILE_CONFIG);
        Document document = getNewDocument(file);
        Element root = createRoot(document, "rsace_manifest",
                                  "http://jocdev.com/Rsace/ConfigFiles/manifest",
                                  "DO NOT EDIT THIS FILE");
        prepareManifestData(manifest, root, document);
        InputStream is = getStream(file, document);
        file.setContents(is, IResource.NONE, null);
    }
    public Developer getDeveloperByName (String name)
    {
        IFile file = getFile(TreeBuilder.CONFIG_DIR, ConfigBuilder.TEAM_FILE_CONFIG);
        for (Developer dev : getDevelopers(file))
            if (dev.getName().equalsIgnoreCase(name))
                return dev;
        return null;
    }
    
    public Developer getDeveloperById (String id)
    {
       
        IFile file = getFile(TreeBuilder.CONFIG_DIR, ConfigBuilder.TEAM_FILE_CONFIG );
        for (Developer dev : getDevelopers(file))
            if (dev.getId().equalsIgnoreCase(id))
                return dev;
        return null;
    }
    
    public static String createRandomId ()
    {
        
        int id = 0;
        for (int i = 0; i<5; i++)
        {
            id += randInt(1, 500);
        }
        return String.valueOf(id);
        
        
    }
    
    public static int randInt(int min, int max) {

        // NOTE: Usually this should be a field rather than a method
        // variable so that it is not re-seeded every call.
        Random rand = new Random();

        // nextInt is normally exclusive of the top value,
        // so add 1 to make it inclusive
        int randomNum = rand.nextInt((max - min) + 1) + min;

        return randomNum;
    }

}
